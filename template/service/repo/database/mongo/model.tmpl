package mongo

import (
	"context"

	"gitlab.com/qasir/{{.projectName}}.git/util"

	"gitlab.com/qasir/web/project/qasircore.git/logger"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type Model struct {
}

func (m *Model) Find(ctx context.Context, collection string, data interface{},
	filter map[string]interface{}, opt *options.FindOptions) (err error) {
	cursor, err := MongoDB.Collection(collection).Find(ctx, filter, opt)
	if err != nil {
		logger.LogEntry(ctx).Errorf("[{{.projectName}}] Mongo Find Error: %v", err.Error())
		return
	}
	defer cursor.Close(ctx)
	err = cursor.All(ctx, data)
	if err != nil {
		logger.LogEntry(ctx).Errorf("[{{.projectName}}] Mongo Find Cursor Error: %v", err.Error())
		return
	}

	return
}

func (m *Model) FindOne(ctx context.Context, collection string, data interface{}, filter map[string]interface{}, opt *options.FindOneOptions) (err error) {

	if opt != nil {
		err = MongoDB.Collection(collection).FindOne(ctx, filter, opt).Decode(data)
	} else {
		err = MongoDB.Collection(collection).FindOne(ctx, filter).Decode(data)
	}

	if err != nil {
		if err == mongo.ErrNoDocuments {
			err = util.ErrNotFound(collection)
			logger.LogEntry(ctx).Errorf("[{{.projectName}}] Mongo Find One Error: %v", err.Error())
			return
		}

		return
	}

	return
}

func (m *Model) InsertOne(ctx context.Context, collection string, data interface{}) (id primitive.ObjectID, err error) {
	res, err := MongoDB.Collection(collection).InsertOne(ctx, data)
	if err != nil {
		logger.LogEntry(ctx).Errorf("[{{.projectName}}] Mongo Insert One Error: %v", err.Error())
		return
	}

	if oid, ok := res.InsertedID.(primitive.ObjectID); ok {
		id = oid
	}

	return
}

func (m *Model) UpdateOne(ctx context.Context, collection string, data map[string]interface{}, filter map[string]interface{}) (id primitive.ObjectID, err error) {
	res, err := MongoDB.Collection(collection).UpdateOne(ctx, filter, data)
	if err != nil {
		logger.LogEntry(ctx).Errorf("[{{.projectName}}] Mongo Update One Error: %v", err.Error())
		return
	}

	if oid, ok := res.UpsertedID.(primitive.ObjectID); ok {
		id = oid
	}

	return
}

func NewModel() *Model {
	return &Model{}
}
